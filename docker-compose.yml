services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hotel-reservation-postgres
    environment:
      POSTGRES_DB: hotel_reservation
      POSTGRES_USER: hotel_user
      POSTGRES_PASSWORD: hotel_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hotel_user -d hotel_reservation"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: hotel-reservation-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: hotel-reservation-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Discovery Service (Eureka Server)
  discovery-service:
    build:
      context: .
      dockerfile: discovery-service/Dockerfile
    container_name: hotel-reservation-discovery
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      EUREKA_INSTANCE_HOSTNAME: discovery-service
    networks:
      - hotel-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Hotel Service
  hotel-service:
    build:
      context: .
      dockerfile: hotel-service/Dockerfile
    container_name: hotel-reservation-hotel
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hotel_reservation
      SPRING_DATASOURCE_USERNAME: hotel_user
      SPRING_DATASOURCE_PASSWORD: hotel_password
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      EUREKA_INSTANCE_HOSTNAME: hotel-service
      EUREKA_INSTANCE_PREFERIPADDRESS: true
    networks:
      - hotel-network
    depends_on:
      postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Reservation Service
  reservation-service:
    build:
      context: .
      dockerfile: reservation-service/Dockerfile
    container_name: hotel-reservation-reservation
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hotel_reservation
      SPRING_DATASOURCE_USERNAME: hotel_user
      SPRING_DATASOURCE_PASSWORD: hotel_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      EUREKA_INSTANCE_HOSTNAME: reservation-service
      EUREKA_INSTANCE_PREFERIPADDRESS: true
    networks:
      - hotel-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    container_name: hotel-reservation-notification
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      EUREKA_INSTANCE_HOSTNAME: notification-service
      EUREKA_INSTANCE_PREFERIPADDRESS: true
    networks:
      - hotel-network
    depends_on:
      kafka:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: hotel-reservation-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
      EUREKA_INSTANCE_HOSTNAME: api-gateway
      EUREKA_INSTANCE_PREFERIPADDRESS: true
    networks:
      - hotel-network
    depends_on:
      discovery-service:
        condition: service_healthy
      hotel-service:
        condition: service_healthy
      reservation-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: hotel-reservation-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@hotel.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - hotel-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: hotel-reservation-user-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - hotel-network
    depends_on:
      postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: ./hotel-reservation-frontend
      dockerfile: Dockerfile
    container_name: hotel-reservation-frontend
    ports:
      - "3000:80"
    networks:
      - hotel-network
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:

networks:
  hotel-network:
    driver: bridge 